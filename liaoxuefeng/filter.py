# -*- coding: utf-8 -*-
"""
Created on Mon Oct 14 19:32:43 2019

@author: cv
"""

"""
filter求素数
计算素数的一个方法是埃氏筛法，它的算法理解起来非常简单：
首先，列出从2开始的所有自然数，构造一个序列：
2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...
取序列的第一个数 2，它一定是素数，然后用2把序列的2的倍数筛掉：
3,  5,  7,  9, 11, 13,  15,  17,  19,  ...
取新序列的第一个数 3，它一定是素数，然后用3把序列的3的倍数筛掉：
5, 7, 10, 11, 13, 14, 17, 19, ...
取新序列的第一个数 5，然后用5把序列的5的倍数筛掉：
7, 11, 13, 17,19, ...
不断筛下去，就可以得到所有的素数。
"""
# 1. 先构造一个从3开始的奇数序列：
def _odd_iter():
    n = 1
    while True: # 这是一个生成器，并且是一个无限序列。
        n = n + 2
        yield n

# 2. 然后定义一个筛选函数：
def _not_divisible(n):
    return lambda x:x%n > 0 # 返回一个函数，检查其参数x是否不被n整除

# 3. 最后，定义一个生成器，不断返回下一个素数：
def primes():
    yield 2
    it = _odd_iter() # 初始序列
    while True:
        n = next(it) # 返回序列第一个元素，它肯定是素数
        yield n 
        it = filter(_not_divisible(n),it) # 筛掉被 n 整除的数，剩下的数构成新序列

"""
filter()函数返回的是一个Iterator，也就是一个惰性序列
filter()的作用是从一个序列中筛出符合条件的元素。由于filter()使用了惰性计算，所以只有在取filter()结果的时候，才会真正筛选并每次返回下一个筛出的元素
"""
# 打印 100 以内的素数:
for n in primes():
    if n < 100:
        print(n)
    else:
        break


"""
回数是指从左向右读和从右向左读都是一样的数，例如12321，909。请利用filter()筛选出回数：
"""
def is_palindrome(n):
    s = str(n)
    return s == s[-1::-1]


# 测试:
output = filter(is_palindrome, range(1, 1000))
print('1~1000:', list(output))
if list(filter(is_palindrome, range(1, 200))) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191]:
    print('测试成功!')
else:
    print('测试失败!')